openapi: 3.1.0
info:
  title: Studiversity
  version: 1.0.0
servers:
  - url: http://localhost:8080/
    description: local server
paths:
  /auth/token:
    post:
      tags:
        - Authorization
      parameters:
        - name: grant_type
          in: query
          description: Grand type
          required: true
          schema:
            type: string
            enum: [ password, refresh_token ]
      responses:
        '200':
          description: Получение токена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInResponse"
  /signup:
    post:
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Successfully registration
  /users:
    get:
      summary: Query users
      tags:
        - Users
      parameters:
        - name: q
          in: query
          description: Query text
          required: true
          schema:
            type: string
            example: ivan ivanov
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
    post:
      summary: Create a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      security:
        - bearerAuth: [ ]
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
          format: uuid
        description: The user ID
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      security:
        - bearerAuth: [ ]
  /studygroups:
    get:
      summary: Query study groups
      tags:
        - Study Groups
      security:
        - bearerAuth: [ ]
      parameters:
        - name: q
          in: query
          description: Query text
          schema:
            type: string
            example: PCS-6132
        - name: member_id
          in: query
          description: The member ID
          schema:
            type: string
            format: uuid
        - name: role_id
          in: query
          description: The role ID
          schema:
            type: integer
            format: int64
        - name: specialty_id
          in: query
          description: The specialty ID
          schema:
            type: string
            format: uuid
        - name: academic_year
          in: query
          description: The academic year
          schema:
            type: integer
    post:
      summary: Create study sroup
      tags:
        - Study Groups
      security:
        - bearerAuth: [ ]


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
      description: 'note: non-oauth scopes are not defined at the securityScheme level'

  schemas:
    SignInResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwic3ViIjoiY2ExZmRmNWQtMmNiOC00NzU1LWI5YjctYTFiNWE3NzJiMTFjIiwiZXhwIjoxNjg2NjcxOTUxfQ.Lq1Sqp5bbP2-31FaoPqzy9XK0eQSHX2_3pnOA6MRjYE
        refreshToken:
          type: string
          example: 77bdd9c0-21d6-4400-bdbe-be0ac4d28720
        organizationId:
          type: string
          example: b3e226b3-2d90-4197-bb65-976ab7595f31
    SignupRequest:
      type: object
      required:
        - firstName
        - surname
      properties:
        firstName:
          type: string
          example: Andrew
        surname:
          type: string
          example: Ivanov
        patronymic:
          type: string
          example: Ivanovich
        gender:
          type: string
          enum: [ MALE, FEMALE ]
        email:
          type: string
          example: ivan@mail.ru
        password:
          type: string
          example: hbfFVDNdsf.*)3M83f4
    CreateUserRequest:
      type: object
      required:
        - firstName
        - surname
        - patronymic
        - email
        - gender
      properties:
        firstName:
          type: string
          example: Andrew
        surname:
          type: string
          example: Ivanov
        patronymic:
          type: string
          example: Ivanovich
        email:
          type: string
          example: ivan@mail.ru
        gender:
          type: string
          enum: [ MALE, FEMALE ]
        roleIds:
          type: array
          items:
            type: integer
            format: int64
          example: [ 2, 3 ]
    User:
      type: object
      required:
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
          example: Andrew
        surname:
          type: string
          example: Ivanov
        patronymic:
          type: string
          example: Ivanovich
        gender:
          type: string
          enum: [ MALE, FEMALE ]
        account:
          type: object
          properties:
            email:
              type: string
              example: ivan@mail.ru
        avatarUrl:
          type: string
        generatedAvatar:
          type: boolean
    StudyGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        academicYear:
          type: object
          properties:
            start:
              type: integer
              format: int64
            end:
              type: integer
              format: int64
        specialty:
          $ref: '#/components/schemas/Specialty'
    Specialty:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        shortname:
          type: string

