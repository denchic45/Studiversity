import com.denchic45.stuiversity.api.user.model.Gender;
import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS userEntity (
    user_id TEXT NOT NULL UNIQUE PRIMARY KEY,
    first_name TEXT NOT NULL,
    surname TEXT NOT NULL,
    patronymic TEXT,
    email TEXT NOT NULL,
    avatar_url TEXT NOT NULL,
    generated_avatar INTEGER AS Boolean NOT NULL,
    gender TEXT AS Gender NOT NULL
);


upsert:
INSERT INTO userEntity
VALUES ?
ON CONFLICT(user_id)
DO UPDATE SET
first_name = excluded.first_name,
surname = excluded.surname,
patronymic = excluded.patronymic,
email = excluded.email,
avatar_url = excluded.avatar_url,
gender = excluded.gender;

getById:
SELECT *
FROM userEntity
WHERE user_id = :id;

getAll:
SELECT *
FROM userEntity;

isExist:
SELECT EXISTS(
SELECT * FROM userEntity
WHERE user_id = :id
);

updateAvatar:
UPDATE userEntity SET avatar_url = :avatarUrl, generated_avatar = :isGenerated
WHERE user_id = :userId;

-- getByGroupId:
-- SELECT * FROM userEntity
-- WHERE user_group_id =: groupId
-- ORDER BY surname;

-- getGroupId:
-- SELECT user_group_id FROM userEntity
-- WHERE user_id =: userId;

-- isExistByIdAndGroupId:
-- SELECT EXISTS(
-- SELECT * FROM userEntity WHERE user_id =: id
-- AND user_group_id =: groupId
-- );

-- deleteMissingStudentsByGroup:
-- DELETE FROM userEntity
-- WHERE user_group_id =: groupId
-- AND gender
-- AND user_id NOT IN ?;

-- getStudentIdsOfCourseByCourseId:
-- SELECT u.user_id
-- FROM userEntity  u
-- JOIN groupCourseEntity gc
-- ON u.user_group_id = gc.group_id
-- WHERE gc.course_id =: courseId;

-- getStudentsWithCuratorByGroupId:
-- SELECT u.*, g.group_id, g.headman_id, g.curator_id FROM groupEntity g
-- JOIN userEntity u
-- ON u.user_group_id = g.group_id
-- OR u.user_id = g.curator_id
-- WHERE group_id =: groupId
-- ORDER BY surname;

-- deleteMissingTeachersByGroup:
-- DELETE FROM userEntity
-- WHERE user_group_id =: groupId
-- AND user_id NOT IN(?);