CREATE TABLE IF NOT EXISTS courseEntity (
course_id TEXT NOT NULL UNIQUE PRIMARY KEY,
name TEXT NOT NULL,
subject_id TEXT NOT NULL,
teacher_id TEXT NOT NULL
);

upsert:
INSERT INTO courseEntity
VALUES ?
ON CONFLICT(course_id)
DO UPDATE SET
name = excluded.name,
subject_id = excluded.subject_id,
teacher_id = excluded.teacher_id;

getCourseWithSubjectWithTeacherAndGroupsById:
SELECT c.*, s.*, u.*, g.group_id, g.group_name, g.specialty_id FROM courseEntity c
JOIN subjectEntity s ON s.subject_id = c.subject_id
JOIN userEntity u ON u.user_id = c.teacher_id
JOIN groupCourseEntity gc ON gc.course_id = c.course_id
JOIN groupEntity g ON g.group_id = gc.group_id
WHERE c.course_id =: id;

getCoursesWithSubjectAndTeacherByGroupId:
SELECT c.*,u.*,s.* FROM courseEntity c
JOIN groupCourseEntity gc ON gc.course_id =c.course_id
JOIN subjectEntity s ON s.subject_id = c.subject_id
JOIN userEntity u ON u.user_id = c.teacher_id
WHERE gc.group_id =:groupId;

hasRelatedTeacherToGroup:
SELECT EXISTS (
SELECT 1 FROM courseEntity c
JOIN groupCourseEntity gc ON gc.group_id =:groupId
WHERE teacher_id=:teacherId
);

hasRelatedSubjectToGroup:
SELECT EXISTS (
SELECT 1 FROM courseEntity c
JOIN groupCourseEntity gc ON gc.group_id =:groupId
WHERE subject_id=:subjectId
);

getCourseWithSubjectAndTeacherByTeacherId:
SELECT * FROM courseEntity c
JOIN subjectEntity s ON s.subject_id = c.subject_id
JOIN userEntity u ON u.user_id = c.teacher_id
WHERE teacher_id =: id;

deleteById:
DELETE FROM courseEntity
WHERE course_id =: courseId;

isCourseTeacher:
SELECT EXISTS (
SELECT * FROM courseEntity
WHERE course_id =: courseId
AND teacher_id =: teacherId
);

getCourseIdByContentId:
SELECT cc.course_id FROM courseContentEntity cc
WHERE content_id=:taskId;